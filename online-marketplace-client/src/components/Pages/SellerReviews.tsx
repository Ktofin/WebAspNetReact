import React, { useEffect, useState } from "react";
import {
    Box,
    Typography,
    Paper,
    CircularProgress,
    Alert,
    TextField,
    Button
} from "@mui/material";
/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–¥–∞–≤—Ü–∞.
 */

interface Review {
    id: number;
    productId: number;
    productName?: string;
    text: string;
    rating: number;
    reply?: string;
}
/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤, –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞,
 * –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤.
 *
 * @component
 * @example
 * return <SellerReviews />;
 */
const SellerReviews: React.FC = () => {
    const [reviews, setReviews] = useState<Review[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [replies, setReplies] = useState<Record<number, string>>({});
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞.
     */
    const loadReviews = async () => {
        try {
            const res = await fetch("/api/review/seller");
            if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤");
            const data = await res.json();
            setReviews(data);
        } catch (err) {
            setError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã");
        } finally {
            setLoading(false);
        }
    };
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤.
     *
     * @param reviewId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞
     */
    const sendReply = async (reviewId: number) => {
        const reply = replies[reviewId];
        if (!reply?.trim()) return;

        const res = await fetch(`/api/review/${reviewId}/reply`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(reply)
        });

        if (res.ok) {
            await loadReviews();
            setReplies(prev => ({ ...prev, [reviewId]: "" }));
        } else {
            alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç");
        }
    };

    useEffect(() => {
        loadReviews();
    }, []);

    if (loading) return <CircularProgress />;
    if (error) return <Alert severity="error">{error}</Alert>;

    return (
        <Box>
            <Typography variant="h5" gutterBottom>
                –û—Ç–∑—ã–≤—ã –Ω–∞ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã
            </Typography>

            {reviews.map(review => (
                <Paper key={review.id} sx={{ p: 2, mb: 2 }}>
                    <Typography variant="subtitle2">
                        üõç {review.productName || `–¢–æ–≤–∞—Ä #${review.productId}`}
                    </Typography>
                    <Typography>‚≠ê {review.rating}</Typography>
                    <Typography>{review.text}</Typography>

                    {review.reply ? (
                        <Typography sx={{ mt: 1, fontStyle: "italic", color: "gray" }}>
                            –û—Ç–≤–µ—Ç: {review.reply}
                        </Typography>
                    ) : (
                        <>
                            <TextField
                                fullWidth
                                size="small"
                                label="–í–∞—à –æ—Ç–≤–µ—Ç"
                                value={replies[review.id] || ""}
                                onChange={(e) =>
                                    setReplies((prev) => ({ ...prev, [review.id]: e.target.value }))
                                }
                                sx={{ mt: 1 }}
                            />
                            <Button
                                variant="contained"
                                sx={{ mt: 1 }}
                                onClick={() => sendReply(review.id)}
                            >
                                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                            </Button>
                        </>
                    )}
                </Paper>
            ))}
        </Box>
    );
};

export default SellerReviews;
