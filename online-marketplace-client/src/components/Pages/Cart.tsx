import React, { useEffect, useState } from "react";
import {
    Typography,
    Card,
    CardContent,
    TextField,
    Button,
    Box,
    Stack
} from "@mui/material";

/**
 * –ú–æ–¥–µ–ª—å –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞).
 */
interface OrderItem {
    id: number;
    productId: number;
    productName: string;
    productImage?: Uint8Array;
    quantity: number;
    price: number;
}
/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, —É–¥–∞–ª—è—Ç—å –∏—Ö, –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑.
 *
 * @component
 * @example
 * return <Cart />;
 */
const Cart: React.FC = () => {
    const [cartItems, setCartItems] = useState<OrderItem[]>([]);
    const [shippingAddress, setShippingAddress] = useState("");
    const [loading, setLoading] = useState(true);
    const [message, setMessage] = useState("");

    useEffect(() => {
        const loadCart = async () => {
            const res = await fetch("/api/orderitem/cart");
            const data = await res.json();
            setCartItems(data);
            setLoading(false);
        };

        loadCart();
    }, []);

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞.
     * @returns –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
     */
    const calculateTotal = () => {
        return cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    };

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
     * –í–∫–ª—é—á–∞–µ—Ç –∞–¥—Ä–µ—Å, —Ç–æ–≤–∞—Ä—ã –∏ –æ–±—â—É—é —Å—É–º–º—É.
     */
    const handleOrder = async () => {
        if (!shippingAddress) {
            setMessage("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏");
            return;
        }

        const orderDto = {
            shippingAddress,
            orderStatus: "Pending",
            orderDate: new Date().toISOString(),
            totalAmount: calculateTotal(),
            items: cartItems
        };

        const res = await fetch("/api/order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(orderDto)
        });

        if (res.ok) {
            setMessage("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
            setCartItems([]);
        } else {
            const error = await res.text();
            setMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏: " + error);
        }
    };

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –µ–≥–æ ID.
     * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞.
     */
    const handleDeleteFromCart = async (id: number) => {
        const res = await fetch(`/api/orderitem/cart/${id}`, {
            method: "DELETE"
        });

        if (res.ok) {
            setCartItems(prev => prev.filter(item => item.id !== id));
            setMessage("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã");
        } else {
            const err = await res.text();
            setMessage("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + err);
        }
    };
    if (loading) return <Typography>–ó–∞–≥—Ä—É–∑–∫–∞...</Typography>;

    return (
        <Box>
            <Typography variant="h5" gutterBottom>üõí –ö–æ—Ä–∑–∏–Ω–∞</Typography>

            {cartItems.length === 0 && <Typography>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</Typography>}

            <Stack spacing={2}>
                {cartItems.map((item) => (
                    <Card key={item.id}>
                        <CardContent>
                            <Typography variant="h6">{item.productName}</Typography>
                            <Typography>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}</Typography>
                            <Typography>–¶–µ–Ω–∞ –∑–∞ —à—Ç: {item.price} ‚ÇΩ</Typography>
                            <Typography>
                                –°—É–º–º–∞: {(item.quantity * item.price).toFixed(2)} ‚ÇΩ
                            </Typography>
                        </CardContent>
                        <Box sx={{ px: 2, pb: 2 }}>
                            <Button
                                variant="outlined"
                                color="error"
                                onClick={() => handleDeleteFromCart(item.id)}
                            >
                                –£–¥–∞–ª–∏—Ç—å
                            </Button>
                        </Box>
                    </Card>
                ))}
            </Stack>


            {cartItems.length > 0 && (
                <>
                    <Typography sx={{ mt: 3 }} variant="h6">
                        –û–±—â–∞—è —Å—É–º–º–∞: {calculateTotal().toFixed(2)} ‚ÇΩ
                    </Typography>

                    <TextField
                        label="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                        fullWidth
                        sx={{ mt: 2 }}
                        value={shippingAddress}
                        onChange={(e) => setShippingAddress(e.target.value)}
                    />

                    <Button
                        variant="contained"
                        color="primary"
                        onClick={handleOrder}
                        sx={{ mt: 2 }}
                    >
                        –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                    </Button>
                </>
            )}

            {message && <Typography sx={{ mt: 2 }}>{message}</Typography>}
        </Box>
    );
};

export default Cart;
