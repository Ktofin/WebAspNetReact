import React, { useEffect, useState } from "react";
import {
    Box,
    Typography,
    Paper,
    CircularProgress,
    TextField,
    Button,
    Divider,
    Stack
} from "@mui/material";
import { useParams } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import { Rating } from "@mui/material";

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Ç–æ–≤–∞—Ä.
 */
interface Review {
    id: number;
    text: string;
    rating: number;
    userId: string;
    reply?: string;
}
/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º.
 */
interface Message {
    id: number;
    senderId: string;
    content: string;
    sentAt: string;
}
/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–≤–∞—Ä–∞.
 */
interface Product {
    id: number;
    name: string;
    description: string;
    price: number;
    imageData?: string;
    sellerId: string;
}
/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞.
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
 * - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
 * - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
 * - –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
 * - –ü–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º (—á–∞—Ç)
 *
 * @component
 * @example
 * return <ProductDetail />;
 */

const ProductDetail: React.FC = () => {
    const { id } = useParams();
    const { userId } = useAuth();
    const [product, setProduct] = useState<Product | null>(null);
    const [reviews, setReviews] = useState<Review[]>([]);
    const [messages, setMessages] = useState<Message[]>([]);
    const [newMessage, setNewMessage] = useState("");
    const [loading, setLoading] = useState(true);
    const [canReview, setCanReview] = useState(false);
    const [newReview, setNewReview] = useState("");
    const [rating, setRating] = useState<number | null>(3); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID –∏–∑ URL.
     */
    const loadProduct = async () => {
        const res = await fetch(`/api/product/${id}`);
        const data = await res.json();
        setProduct(data);
    };
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
     */
    const checkReviewPermission = async () => {
        const res = await fetch(`/api/review/can-review/${id}`);
        if (res.ok) {
            const allowed = await res.json();
            setCanReview(allowed);
        }
    };
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–æ–≤–∞—Ä—É.
     */
    const loadReviews = async () => {
        try {
            const res = await fetch(`/api/review/product/${id}`);
            if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤");
            const data = await res.json();
            setReviews(data);
        } catch (err) {
            console.error("loadReviews:", err);
        }
    };
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤.
     */
    const handleSendReview = async () => {
        if (!newReview.trim() || !product?.id) return;

        const res = await fetch("/api/review", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                productId: product.id,
                text: newReview,
                rating: rating ?? 3 // –∑–∞—â–∏—Ç–∞ –æ—Ç null
            })
        });

        if (res.ok) {
            setNewReview("");
            loadReviews();
        } else {
            const error = await res.text();
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞:", error);
        }
    };
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –ø–æ —Ç–æ–≤–∞—Ä—É.
     */
    const loadMessages = async () => {
        try {
            if (!product?.id || !product?.sellerId || !userId) return;
            const res = await fetch(
                `/api/message/chat?buyerId=${userId}&sellerId=${product.sellerId}&productId=${product.id}`
            );
            if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π");
            const text = await res.text();
            const data = text ? JSON.parse(text) : [];
            setMessages(data);
        } catch (err) {
            console.error("loadMessages:", err);
        }
    };
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É.
     */
    const sendMessage = async () => {
        try {
            const res = await fetch("/api/message", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    content: newMessage,
                    receiverId: product?.sellerId,
                    productId: product?.id
                })
            });

            if (!res.ok) {
                const errorText = await res.text();  // üëà –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                throw new Error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + errorText);
            }

            setNewMessage("");
            await loadMessages(); // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∂–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        } catch (err) {
            console.error(err);
            alert((err as Error).message);
        }
    };



    useEffect(() => {
        loadProduct();
        loadReviews();
        loadMessages();
        setLoading(false);
        const interval = setInterval(() => {
            loadMessages(); // üîÑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
        }, 5000);

        return () => clearInterval(interval); // –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    }, [id]);
    useEffect(() => {
        if (product) {
            checkReviewPermission();
            loadReviews();
            loadMessages();
            const interval = setInterval(() => {
                loadMessages(); // üîÑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
            }, 5000);
            return () => clearInterval(interval); // –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        }
    }, [product]);
    if (loading || !product) return <CircularProgress />;

    return (
        <Box>
            <Typography variant="h4">{product.name}</Typography>
            <Typography>{product.description}</Typography>
            <Typography variant="h6" sx={{ mt: 2 }}>{product.price} ‚ÇΩ</Typography>

            {product.imageData && (
                <img
                    src={`data:image/jpeg;base64,${product.imageData}`}
                    alt={product.name}
                    style={{ maxWidth: "100%", marginTop: 16 }}
                />
            )}
            {canReview && (
                <Box sx={{ mt: 2 }}>
                    <Typography sx={{ mt: 2 }}>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞:</Typography>
                    <Rating
                        name="user-rating"
                        value={rating}
                        onChange={(_, newValue) => setRating(newValue)}
                    />
                    <Typography variant="subtitle1">–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:</Typography>
                    <TextField
                        fullWidth
                        label="–û—Ç–∑—ã–≤"
                        multiline
                        rows={2}
                        value={newReview}
                        onChange={(e) => setNewReview(e.target.value)}
                    />
                    <Button sx={{ mt: 1 }} variant="contained" onClick={handleSendReview}>
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                    </Button>
                </Box>
            )}
            <Divider sx={{ my: 4 }} />

            <Box sx={{ display: "flex", gap: 4 }}>
                <Box sx={{ flex: 2 }}>
                    <Typography variant="h6">–û—Ç–∑—ã–≤—ã</Typography>
                    {reviews.map((review) => (
                        <Paper key={review.id} sx={{ p: 2, my: 1 }}>
                            <Typography>‚≠ê {review.rating}</Typography>
                            <Typography>{review.text}</Typography>
                            {review.reply && (
                                <Typography sx={{ mt: 1, fontStyle: "italic", color: "gray" }}>
                                    –û—Ç–≤–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞: {review.reply}
                                </Typography>
                            )}
                        </Paper>
                    ))}
                </Box>

                <Box sx={{ flex: 1 }}>
                    <Typography variant="h6">–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º</Typography>
                    <Stack spacing={1} sx={{ maxHeight: 300, overflowY: "auto", mt: 1 }}>
                        {messages.map((msg) => (
                            <Paper key={msg.id} sx={{ p: 1 }}>
                                <Typography variant="caption">
                                    {msg.senderId === userId ? "–í—ã" : "–ü—Ä–æ–¥–∞–≤–µ—Ü"}:
                                </Typography>
                                <Typography>{msg.content}</Typography>
                            </Paper>
                        ))}
                    </Stack>

                    <TextField
                        fullWidth
                        multiline
                        rows={2}
                        label="–°–æ–æ–±—â–µ–Ω–∏–µ"
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        sx={{ mt: 2 }}
                    />
                    <Button
                        variant="contained"
                        fullWidth
                        onClick={sendMessage}
                        sx={{ mt: 1 }}
                        disabled={!newMessage.trim()}
                    >
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                    </Button>
                </Box>
            </Box>
        </Box>
    );
};

export default ProductDetail;
