namespace OnlineMarketplace.Api.Controllers;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using OnlineMarketplace.Application.DTO;
using OnlineMarketplace.Domain.Entities;
using OnlineMarketplace.Domain.Interfaces;
using Microsoft.AspNetCore.Identity;
using OnlineMarketplace.Domain;
using OnlineMarketplace.Application.Services;
/// <summary>
/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞.
/// </summary>
[ApiController]
[Route("api/[controller]")]
public class ReviewController : ControllerBase
{
    private readonly ReviewService _reviewService;
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly IOrderService _orderService;
    private readonly IProductService _productService;

    public ReviewController(ReviewService reviewService, UserManager<ApplicationUser> userManager, IOrderService orderService, IProductService productService)
    {
        _reviewService = reviewService;
        _userManager = userManager;
        _orderService = orderService;
        _productService = productService;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤.
    /// </summary>
    /// <returns>–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤.</returns>
    [HttpGet]
    public async Task<ActionResult<IEnumerable<ReviewDto>>> GetAll()
    {
        var reviews = await _reviewService.GetAllAsync();
        return Ok(reviews.Select(r => _reviewService.MapReviewToDto(r)));
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É.
    /// </summary>
    /// <param name="productId">ID —Ç–æ–≤–∞—Ä–∞.</param>
    /// <returns>–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤.</returns>
    [HttpGet("product/{productId}")]
    public async Task<ActionResult<IEnumerable<ReviewDto>>> GetByProduct(int productId)
    {
        var reviews = await _reviewService.GetAllAsync();
        var filtered = reviews
            .Where(r => r.ProductId == productId)
            .Select(r => _reviewService.MapReviewToDto(r));
        return Ok(filtered);
    }
    
    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ.
    /// </summary>
    /// <param name="productId">ID —Ç–æ–≤–∞—Ä–∞.</param>
    /// <returns>True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω.</returns>
    [Authorize(Roles = "Buyer")]
    [HttpGet("can-review/{productId}")]
    public async Task<ActionResult<bool>> CanLeaveReview(int productId)
    {
        var user = await _userManager.GetUserAsync(User);
        var orders = await _orderService.GetAllAsync();

        var hasBought = orders
            .Where(o => o.BuyerId == user.Id)
            .Any(o => o.OrderItems.Any(i => i.ProductId == productId &&
                                            (i.Status == OrderItemStatus. Canceled || i.Status == OrderItemStatus.Completed)));

        return Ok(hasBought);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –∫ —Ç–æ–≤–∞—Ä—É –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
    /// </summary>
    /// <param name="dto">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∑—ã–≤–µ.</param>
    /// <returns>–°–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤.</returns>
    [Authorize(Roles = "Buyer")]
    [HttpPost]
    public async Task<ActionResult<ReviewDto>> AddReview([FromBody] ReviewDto dto)
    {
        var user = await _userManager.GetUserAsync(User);

        var review = new Review
        {
            ProductId = dto.ProductId,
            Text = dto.Text,
            Rating = dto.Rating,
            BuyerId = user.Id, // üëà —Å—é–¥–∞
            CreatedAt = DateTime.UtcNow
        };

        var created = await _reviewService.AddAsync(review);
        return Ok(_reviewService.MapReviewToDto(created));
    }
    
    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞.
    /// </summary>
    /// <returns>–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞.</returns>
    [Authorize(Roles = "Seller")]
    [HttpGet("seller")]
    public async Task<ActionResult<IEnumerable<ReviewDto>>> GetSellerReviews()
    {
        var user = await _userManager.GetUserAsync(User);
        var allReviews = await _reviewService.GetAllAsync();

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ (–ø–æ Product.SellerId)
        var products = await _productService.GetAllAsync();
        var sellerProductIds = products
            .Where(p => p.SellerId == user.Id)
            .Select(p => p.Id)
            .ToHashSet();

        var filtered = allReviews
            .Where(r => sellerProductIds.Contains(r.ProductId))
            .Select(r => _reviewService.MapReviewToDto(r));

        return Ok(filtered);
    }


    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫ –æ—Ç–∑—ã–≤—É.
    /// </summary>
    /// <param name="id">ID –æ—Ç–∑—ã–≤–∞.</param>
    /// <param name="reply">–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.</param>
    /// <returns>–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ —Å –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–¥–∞–≤—Ü–∞.</returns>
    [Authorize(Roles = "Seller")]
    [HttpPut("{id}/reply")]
    public async Task<IActionResult> Reply(int id, [FromBody] string reply)
    {
        var review = await _reviewService.GetByIdAsync(id);
        if (review == null) return NotFound();

        review.SellerReply = reply;
        await _reviewService.UpdateAsync(review);

        return Ok(_reviewService.MapReviewToDto(review));
    }
}